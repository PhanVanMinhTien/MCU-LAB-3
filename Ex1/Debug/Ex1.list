
Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef8  08002ef8  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef8  08002ef8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000054  08002f54  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002f54  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000992f  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b42  00000000  00000000  000299ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ce3  00000000  00000000  0002c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcb5  00000000  00000000  000436b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082521  00000000  00000000  0004f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b14  00000000  00000000  000d18dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ebc 	.word	0x08002ebc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002ebc 	.word	0x08002ebc

0800014c <subKeyProcess1>:
int KeyReg13 = NORMAL_STATE;
int KeyReg23 = NORMAL_STATE;
int KeyReg33 = NORMAL_STATE;
int TimerForKeyPress3 = 500;

void subKeyProcess1(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess1+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000070 	.word	0x20000070

08000164 <isButton1Pressed>:
int isButton1Pressed(){
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000168:	4b06      	ldr	r3, [pc, #24]	; (8000184 <isButton1Pressed+0x20>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d104      	bne.n	800017a <isButton1Pressed+0x16>
		button1_flag = 0;
 8000170:	4b04      	ldr	r3, [pc, #16]	; (8000184 <isButton1Pressed+0x20>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
		return 1;
 8000176:	2301      	movs	r3, #1
 8000178:	e000      	b.n	800017c <isButton1Pressed+0x18>
	}
	return 0;
 800017a:	2300      	movs	r3, #0
}
 800017c:	4618      	mov	r0, r3
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000070 	.word	0x20000070

08000188 <isButton2Pressed>:
int isButton2Pressed(){
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <isButton2Pressed+0x20>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d104      	bne.n	800019e <isButton2Pressed+0x16>
		button2_flag = 0;
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <isButton2Pressed+0x20>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
		return 1;
 800019a:	2301      	movs	r3, #1
 800019c:	e000      	b.n	80001a0 <isButton2Pressed+0x18>
	}
	return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000074 	.word	0x20000074

080001ac <isButton3Pressed>:
int isButton3Pressed(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 80001b0:	4b06      	ldr	r3, [pc, #24]	; (80001cc <isButton3Pressed+0x20>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d104      	bne.n	80001c2 <isButton3Pressed+0x16>
		button3_flag = 0;
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <isButton3Pressed+0x20>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
		return 1;
 80001be:	2301      	movs	r3, #1
 80001c0:	e000      	b.n	80001c4 <isButton3Pressed+0x18>
	}
	return 0;
 80001c2:	2300      	movs	r3, #0
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	20000078 	.word	0x20000078

080001d0 <subKeyProcess2>:
void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000074 	.word	0x20000074

080001e8 <subKeyProcess3>:
void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000078 	.word	0x20000078

08000200 <getKeyInput1>:
void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg01 = KeyReg11;
 8000204:	4b20      	ldr	r3, [pc, #128]	; (8000288 <getKeyInput1+0x88>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a20      	ldr	r2, [pc, #128]	; (800028c <getKeyInput1+0x8c>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg11 = KeyReg21;
 800020c:	4b20      	ldr	r3, [pc, #128]	; (8000290 <getKeyInput1+0x90>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput1+0x88>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg21 = HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	481e      	ldr	r0, [pc, #120]	; (8000294 <getKeyInput1+0x94>)
 800021a:	f001 fe2f 	bl	8001e7c <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <getKeyInput1+0x90>)
 8000224:	601a      	str	r2, [r3, #0]
	if ((KeyReg01 == KeyReg11) && (KeyReg11 == KeyReg21)){
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <getKeyInput1+0x8c>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <getKeyInput1+0x88>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d128      	bne.n	8000284 <getKeyInput1+0x84>
 8000232:	4b15      	ldr	r3, [pc, #84]	; (8000288 <getKeyInput1+0x88>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <getKeyInput1+0x90>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d122      	bne.n	8000284 <getKeyInput1+0x84>
		if (KeyReg31 != KeyReg21){
 800023e:	4b16      	ldr	r3, [pc, #88]	; (8000298 <getKeyInput1+0x98>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <getKeyInput1+0x90>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00a      	beq.n	8000260 <getKeyInput1+0x60>
			KeyReg31 = KeyReg21;
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <getKeyInput1+0x90>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <getKeyInput1+0x98>)
 8000250:	6013      	str	r3, [r2, #0]
			if (KeyReg21 == PRESSED_STATE){
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <getKeyInput1+0x90>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d114      	bne.n	8000284 <getKeyInput1+0x84>
				//TODO
				subKeyProcess1();
 800025a:	f7ff ff77 	bl	800014c <subKeyProcess1>
					subKeyProcess1();
				}
			}
		}
	}
}
 800025e:	e011      	b.n	8000284 <getKeyInput1+0x84>
			TimerForKeyPress1--;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <getKeyInput1+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3b01      	subs	r3, #1
 8000266:	4a0d      	ldr	r2, [pc, #52]	; (800029c <getKeyInput1+0x9c>)
 8000268:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 == 0){
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <getKeyInput1+0x9c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d108      	bne.n	8000284 <getKeyInput1+0x84>
				TimerForKeyPress1 = 200;
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <getKeyInput1+0x9c>)
 8000274:	22c8      	movs	r2, #200	; 0xc8
 8000276:	601a      	str	r2, [r3, #0]
				if (KeyReg21 == PRESSED_STATE){
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <getKeyInput1+0x90>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <getKeyInput1+0x84>
					subKeyProcess1();
 8000280:	f7ff ff64 	bl	800014c <subKeyProcess1>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000004 	.word	0x20000004
 800028c:	20000000 	.word	0x20000000
 8000290:	20000008 	.word	0x20000008
 8000294:	40011000 	.word	0x40011000
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000010 	.word	0x20000010

080002a0 <getKeyInput2>:
void getKeyInput2(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	KeyReg02 = KeyReg12;
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <getKeyInput2+0x88>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a20      	ldr	r2, [pc, #128]	; (800032c <getKeyInput2+0x8c>)
 80002aa:	6013      	str	r3, [r2, #0]
	KeyReg12 = KeyReg22;
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <getKeyInput2+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <getKeyInput2+0x88>)
 80002b2:	6013      	str	r3, [r2, #0]
	KeyReg22 = HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 80002b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b8:	481e      	ldr	r0, [pc, #120]	; (8000334 <getKeyInput2+0x94>)
 80002ba:	f001 fddf 	bl	8001e7c <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <getKeyInput2+0x90>)
 80002c4:	601a      	str	r2, [r3, #0]
	if ( (KeyReg02 == KeyReg12) && (KeyReg12 == KeyReg22) ){
 80002c6:	4b19      	ldr	r3, [pc, #100]	; (800032c <getKeyInput2+0x8c>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <getKeyInput2+0x88>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d128      	bne.n	8000324 <getKeyInput2+0x84>
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyInput2+0x88>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <getKeyInput2+0x90>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d122      	bne.n	8000324 <getKeyInput2+0x84>
		if (KeyReg32 != KeyReg22){
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <getKeyInput2+0x98>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <getKeyInput2+0x90>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d00a      	beq.n	8000300 <getKeyInput2+0x60>
			KeyReg32 = KeyReg22;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <getKeyInput2+0x90>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <getKeyInput2+0x98>)
 80002f0:	6013      	str	r3, [r2, #0]
			if (KeyReg22 == PRESSED_STATE){
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <getKeyInput2+0x90>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d114      	bne.n	8000324 <getKeyInput2+0x84>
				//TODO
				subKeyProcess2();
 80002fa:	f7ff ff69 	bl	80001d0 <subKeyProcess2>
					subKeyProcess2();
				}
			}
		}
	}
}
 80002fe:	e011      	b.n	8000324 <getKeyInput2+0x84>
			TimerForKeyPress2--;
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <getKeyInput2+0x9c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3b01      	subs	r3, #1
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <getKeyInput2+0x9c>)
 8000308:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 == 0){
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <getKeyInput2+0x9c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d108      	bne.n	8000324 <getKeyInput2+0x84>
				TimerForKeyPress2 = 200;
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <getKeyInput2+0x9c>)
 8000314:	22c8      	movs	r2, #200	; 0xc8
 8000316:	601a      	str	r2, [r3, #0]
				if (KeyReg22 == PRESSED_STATE){
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <getKeyInput2+0x90>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <getKeyInput2+0x84>
					subKeyProcess2();
 8000320:	f7ff ff56 	bl	80001d0 <subKeyProcess2>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000018 	.word	0x20000018
 800032c:	20000014 	.word	0x20000014
 8000330:	2000001c 	.word	0x2000001c
 8000334:	40011000 	.word	0x40011000
 8000338:	20000020 	.word	0x20000020
 800033c:	20000024 	.word	0x20000024

08000340 <getKeyInput3>:
void getKeyInput3(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	KeyReg03 = KeyReg13;
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <getKeyInput3+0x88>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a20      	ldr	r2, [pc, #128]	; (80003cc <getKeyInput3+0x8c>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg13 = KeyReg23;
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <getKeyInput3+0x90>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <getKeyInput3+0x88>)
 8000352:	6013      	str	r3, [r2, #0]
	KeyReg23 = HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin);
 8000354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000358:	481e      	ldr	r0, [pc, #120]	; (80003d4 <getKeyInput3+0x94>)
 800035a:	f001 fd8f 	bl	8001e7c <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <getKeyInput3+0x90>)
 8000364:	601a      	str	r2, [r3, #0]
	if ( (KeyReg03 == KeyReg13) && (KeyReg13 == KeyReg23) ){
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <getKeyInput3+0x8c>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <getKeyInput3+0x88>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	429a      	cmp	r2, r3
 8000370:	d128      	bne.n	80003c4 <getKeyInput3+0x84>
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <getKeyInput3+0x88>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <getKeyInput3+0x90>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	429a      	cmp	r2, r3
 800037c:	d122      	bne.n	80003c4 <getKeyInput3+0x84>
		if (KeyReg33 != KeyReg23){
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <getKeyInput3+0x98>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <getKeyInput3+0x90>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d00a      	beq.n	80003a0 <getKeyInput3+0x60>
			KeyReg33 = KeyReg23;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <getKeyInput3+0x90>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <getKeyInput3+0x98>)
 8000390:	6013      	str	r3, [r2, #0]
			if (KeyReg23 == PRESSED_STATE){
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <getKeyInput3+0x90>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d114      	bne.n	80003c4 <getKeyInput3+0x84>
				//TODO
				subKeyProcess3();
 800039a:	f7ff ff25 	bl	80001e8 <subKeyProcess3>
					subKeyProcess3();
				}
			}
		}
	}
}
 800039e:	e011      	b.n	80003c4 <getKeyInput3+0x84>
			TimerForKeyPress3--;
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <getKeyInput3+0x9c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <getKeyInput3+0x9c>)
 80003a8:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 == 0) {
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <getKeyInput3+0x9c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d108      	bne.n	80003c4 <getKeyInput3+0x84>
				TimerForKeyPress3 = 200;
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <getKeyInput3+0x9c>)
 80003b4:	22c8      	movs	r2, #200	; 0xc8
 80003b6:	601a      	str	r2, [r3, #0]
				if (KeyReg23 == PRESSED_STATE){
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <getKeyInput3+0x90>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d101      	bne.n	80003c4 <getKeyInput3+0x84>
					subKeyProcess3();
 80003c0:	f7ff ff12 	bl	80001e8 <subKeyProcess3>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000002c 	.word	0x2000002c
 80003cc:	20000028 	.word	0x20000028
 80003d0:	20000030 	.word	0x20000030
 80003d4:	40011000 	.word	0x40011000
 80003d8:	20000034 	.word	0x20000034
 80003dc:	20000038 	.word	0x20000038

080003e0 <getKeyInputFor3Button>:

void getKeyInputFor3Button(){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	getKeyInput1();
 80003e4:	f7ff ff0c 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 80003e8:	f7ff ff5a 	bl	80002a0 <getKeyInput2>
	getKeyInput3();
 80003ec:	f7ff ffa8 	bl	8000340 <getKeyInput3>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <fsm_automatic_run>:
int led_index = 0;
int counter0 = 0;
int counter1 = 0;
int counter2 = 0;
int counter3 = 0;
void fsm_automatic_run(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	switch(status){
 80003f8:	4b98      	ldr	r3, [pc, #608]	; (800065c <fsm_automatic_run+0x268>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	2b05      	cmp	r3, #5
 8000400:	f200 8120 	bhi.w	8000644 <fsm_automatic_run+0x250>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <fsm_automatic_run+0x18>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	08000425 	.word	0x08000425
 8000410:	08000493 	.word	0x08000493
 8000414:	08000501 	.word	0x08000501
 8000418:	0800056d 	.word	0x0800056d
 800041c:	080005d9 	.word	0x080005d9
 8000420:	08000469 	.word	0x08000469
	case INIT:
		//TODO
		status = MODE1;
 8000424:	4b8d      	ldr	r3, [pc, #564]	; (800065c <fsm_automatic_run+0x268>)
 8000426:	2206      	movs	r2, #6
 8000428:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2102      	movs	r1, #2
 800042e:	488c      	ldr	r0, [pc, #560]	; (8000660 <fsm_automatic_run+0x26c>)
 8000430:	f001 fd3b 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRE_HOR_GPIO_Port, GRE_HOR_Pin, GPIO_PIN_SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2108      	movs	r1, #8
 8000438:	4889      	ldr	r0, [pc, #548]	; (8000660 <fsm_automatic_run+0x26c>)
 800043a:	f001 fd36 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEL_HOR_GPIO_Port, YEL_HOR_Pin, GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2104      	movs	r1, #4
 8000442:	4887      	ldr	r0, [pc, #540]	; (8000660 <fsm_automatic_run+0x26c>)
 8000444:	f001 fd31 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2110      	movs	r1, #16
 800044c:	4884      	ldr	r0, [pc, #528]	; (8000660 <fsm_automatic_run+0x26c>)
 800044e:	f001 fd2c 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRE_VER_GPIO_Port, GRE_VER_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	4882      	ldr	r0, [pc, #520]	; (8000660 <fsm_automatic_run+0x26c>)
 8000458:	f001 fd27 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEL_VER_GPIO_Port, YEL_VER_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2120      	movs	r1, #32
 8000460:	487f      	ldr	r0, [pc, #508]	; (8000660 <fsm_automatic_run+0x26c>)
 8000462:	f001 fd22 	bl	8001eaa <HAL_GPIO_WritePin>

//		setTimer1(10);
//		setTimer3(10);
//		setTimer2(10);
//		setTimer4(500);
		break;
 8000466:	e0f6      	b.n	8000656 <fsm_automatic_run+0x262>

	case MODE1:
		//TODO
		status = RED1_GRE2;
 8000468:	4b7c      	ldr	r3, [pc, #496]	; (800065c <fsm_automatic_run+0x268>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
		setTimer0(GREEN * 1000);		//set Timer1 = duration RED
 800046e:	4b7d      	ldr	r3, [pc, #500]	; (8000664 <fsm_automatic_run+0x270>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f001 f852 	bl	8001524 <setTimer0>
		setTimer1(1000);
 8000480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000484:	f001 f86a 	bl	800155c <setTimer1>
		setTimer2(500);
 8000488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800048c:	f001 f882 	bl	8001594 <setTimer2>
		break;
 8000490:	e0e1      	b.n	8000656 <fsm_automatic_run+0x262>
	case RED1_GRE2:
		//TODO
		setRED1();
 8000492:	f000 fcad 	bl	8000df0 <setRED1>
		setGRE2();
 8000496:	f000 fced 	bl	8000e74 <setGRE2>
		if (timer0_flag == 1){
 800049a:	4b73      	ldr	r3, [pc, #460]	; (8000668 <fsm_automatic_run+0x274>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d10b      	bne.n	80004ba <fsm_automatic_run+0xc6>
			status = RED1_YEL2;
 80004a2:	4b6e      	ldr	r3, [pc, #440]	; (800065c <fsm_automatic_run+0x268>)
 80004a4:	2203      	movs	r2, #3
 80004a6:	601a      	str	r2, [r3, #0]
			setTimer0(YEL * 1000);
 80004a8:	4b70      	ldr	r3, [pc, #448]	; (800066c <fsm_automatic_run+0x278>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004b0:	fb02 f303 	mul.w	r3, r2, r3
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 f835 	bl	8001524 <setTimer0>
		}
		if (timer1_flag == 1){
 80004ba:	4b6d      	ldr	r3, [pc, #436]	; (8000670 <fsm_automatic_run+0x27c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d108      	bne.n	80004d4 <fsm_automatic_run+0xe0>
			updateBufferMode1(status);
 80004c2:	4b66      	ldr	r3, [pc, #408]	; (800065c <fsm_automatic_run+0x268>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fdce 	bl	8001068 <updateBufferMode1>
			setTimer1(1000);
 80004cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d0:	f001 f844 	bl	800155c <setTimer1>
		}
		if (timer2_flag == 1){
 80004d4:	4b67      	ldr	r3, [pc, #412]	; (8000674 <fsm_automatic_run+0x280>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d107      	bne.n	80004ec <fsm_automatic_run+0xf8>
			update7SEG(led_index);
 80004dc:	4b66      	ldr	r3, [pc, #408]	; (8000678 <fsm_automatic_run+0x284>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 fd2f 	bl	8000f44 <update7SEG>
			setTimer2(100);
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f001 f854 	bl	8001594 <setTimer2>
//			if (led_index >= 3) led_index = 0;
//			else led_index++;
		}
		if (isButton1Pressed() == 1){
 80004ec:	f7ff fe3a 	bl	8000164 <isButton1Pressed>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	f040 80a8 	bne.w	8000648 <fsm_automatic_run+0x254>
			status = MODE2;
 80004f8:	4b58      	ldr	r3, [pc, #352]	; (800065c <fsm_automatic_run+0x268>)
 80004fa:	2207      	movs	r2, #7
 80004fc:	601a      	str	r2, [r3, #0]
		}
		break;
 80004fe:	e0a3      	b.n	8000648 <fsm_automatic_run+0x254>

	case RED1_YEL2:
		setRED1();
 8000500:	f000 fc76 	bl	8000df0 <setRED1>
		setYEL2();
 8000504:	f000 fce2 	bl	8000ecc <setYEL2>
		if (timer0_flag == 1){
 8000508:	4b57      	ldr	r3, [pc, #348]	; (8000668 <fsm_automatic_run+0x274>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d10b      	bne.n	8000528 <fsm_automatic_run+0x134>
			status = GRE1_RED2;
 8000510:	4b52      	ldr	r3, [pc, #328]	; (800065c <fsm_automatic_run+0x268>)
 8000512:	2204      	movs	r2, #4
 8000514:	601a      	str	r2, [r3, #0]
			setTimer0(GREEN * 1000);
 8000516:	4b53      	ldr	r3, [pc, #332]	; (8000664 <fsm_automatic_run+0x270>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051e:	fb02 f303 	mul.w	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fffe 	bl	8001524 <setTimer0>
		}
		if (timer1_flag == 1){
 8000528:	4b51      	ldr	r3, [pc, #324]	; (8000670 <fsm_automatic_run+0x27c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d108      	bne.n	8000542 <fsm_automatic_run+0x14e>
			setTimer1(1000);
 8000530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000534:	f001 f812 	bl	800155c <setTimer1>
			updateBufferMode1(status);
 8000538:	4b48      	ldr	r3, [pc, #288]	; (800065c <fsm_automatic_run+0x268>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fd93 	bl	8001068 <updateBufferMode1>
		}
		if (timer2_flag == 1){
 8000542:	4b4c      	ldr	r3, [pc, #304]	; (8000674 <fsm_automatic_run+0x280>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d107      	bne.n	800055a <fsm_automatic_run+0x166>
			update7SEG(led_index);
 800054a:	4b4b      	ldr	r3, [pc, #300]	; (8000678 <fsm_automatic_run+0x284>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fcf8 	bl	8000f44 <update7SEG>
			setTimer2(100);
 8000554:	2064      	movs	r0, #100	; 0x64
 8000556:	f001 f81d 	bl	8001594 <setTimer2>
//			if (led_index >= 3) led_index = 0;
//			else led_index++;
		}
		if (isButton1Pressed() == 1){
 800055a:	f7ff fe03 	bl	8000164 <isButton1Pressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d173      	bne.n	800064c <fsm_automatic_run+0x258>
			status = MODE2;
 8000564:	4b3d      	ldr	r3, [pc, #244]	; (800065c <fsm_automatic_run+0x268>)
 8000566:	2207      	movs	r2, #7
 8000568:	601a      	str	r2, [r3, #0]
		}
		break;
 800056a:	e06f      	b.n	800064c <fsm_automatic_run+0x258>

	case GRE1_RED2:
		//TODO
		setGRE1();
 800056c:	f000 fc6c 	bl	8000e48 <setGRE1>
		setRED2();
 8000570:	f000 fc54 	bl	8000e1c <setRED2>
		if (timer0_flag == 1){
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <fsm_automatic_run+0x274>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10b      	bne.n	8000594 <fsm_automatic_run+0x1a0>
			status = YEL1_RED2;
 800057c:	4b37      	ldr	r3, [pc, #220]	; (800065c <fsm_automatic_run+0x268>)
 800057e:	2205      	movs	r2, #5
 8000580:	601a      	str	r2, [r3, #0]
			setTimer0(YEL * 1000);
 8000582:	4b3a      	ldr	r3, [pc, #232]	; (800066c <fsm_automatic_run+0x278>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058a:	fb02 f303 	mul.w	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 ffc8 	bl	8001524 <setTimer0>
		}
		if (timer1_flag == 1){
 8000594:	4b36      	ldr	r3, [pc, #216]	; (8000670 <fsm_automatic_run+0x27c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d108      	bne.n	80005ae <fsm_automatic_run+0x1ba>
			updateBufferMode1(status);
 800059c:	4b2f      	ldr	r3, [pc, #188]	; (800065c <fsm_automatic_run+0x268>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fd61 	bl	8001068 <updateBufferMode1>
			setTimer1(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 ffd7 	bl	800155c <setTimer1>
		}
		if (timer2_flag == 1){
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <fsm_automatic_run+0x280>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d107      	bne.n	80005c6 <fsm_automatic_run+0x1d2>
			setTimer2(100);
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f000 ffec 	bl	8001594 <setTimer2>
			update7SEG(led_index);
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <fsm_automatic_run+0x284>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fcbf 	bl	8000f44 <update7SEG>
//			if (led_index >= 3) led_index = 0;
//			else led_index++;
		}
		if (isButton1Pressed() == 1){
 80005c6:	f7ff fdcd 	bl	8000164 <isButton1Pressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d13f      	bne.n	8000650 <fsm_automatic_run+0x25c>
			status = MODE2;
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <fsm_automatic_run+0x268>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80005d6:	e03b      	b.n	8000650 <fsm_automatic_run+0x25c>

	case YEL1_RED2:
		//TODO
		setYEL1();
 80005d8:	f000 fc62 	bl	8000ea0 <setYEL1>
		setRED2();
 80005dc:	f000 fc1e 	bl	8000e1c <setRED2>
		if (timer0_flag == 1){
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <fsm_automatic_run+0x274>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d10b      	bne.n	8000600 <fsm_automatic_run+0x20c>
			status = RED1_GRE2;
 80005e8:	4b1c      	ldr	r3, [pc, #112]	; (800065c <fsm_automatic_run+0x268>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	601a      	str	r2, [r3, #0]
			setTimer0(GREEN * 1000);
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <fsm_automatic_run+0x270>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ff92 	bl	8001524 <setTimer0>
		}
		if (timer1_flag == 1){
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <fsm_automatic_run+0x27c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d108      	bne.n	800061a <fsm_automatic_run+0x226>
			setTimer1(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 ffa6 	bl	800155c <setTimer1>
			updateBufferMode1(status);
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <fsm_automatic_run+0x268>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd27 	bl	8001068 <updateBufferMode1>
		}
		if (timer2_flag == 1){
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <fsm_automatic_run+0x280>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d107      	bne.n	8000632 <fsm_automatic_run+0x23e>
			setTimer2(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 ffb6 	bl	8001594 <setTimer2>
			update7SEG(led_index);
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <fsm_automatic_run+0x284>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fc89 	bl	8000f44 <update7SEG>
//			if (led_index >= 3) led_index = 0;
//			else led_index++;
		}
		if (isButton1Pressed() == 1){
 8000632:	f7ff fd97 	bl	8000164 <isButton1Pressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10b      	bne.n	8000654 <fsm_automatic_run+0x260>
				status = MODE2;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <fsm_automatic_run+0x268>)
 800063e:	2207      	movs	r2, #7
 8000640:	601a      	str	r2, [r3, #0]
		}
		break;
 8000642:	e007      	b.n	8000654 <fsm_automatic_run+0x260>

	default:
		break;
 8000644:	bf00      	nop
 8000646:	e006      	b.n	8000656 <fsm_automatic_run+0x262>
		break;
 8000648:	bf00      	nop
 800064a:	e004      	b.n	8000656 <fsm_automatic_run+0x262>
		break;
 800064c:	bf00      	nop
 800064e:	e002      	b.n	8000656 <fsm_automatic_run+0x262>
		break;
 8000650:	bf00      	nop
 8000652:	e000      	b.n	8000656 <fsm_automatic_run+0x262>
		break;
 8000654:	bf00      	nop
	}
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000090 	.word	0x20000090
 8000660:	40010800 	.word	0x40010800
 8000664:	2000003c 	.word	0x2000003c
 8000668:	200000a8 	.word	0x200000a8
 800066c:	20000044 	.word	0x20000044
 8000670:	200000b0 	.word	0x200000b0
 8000674:	200000b8 	.word	0x200000b8
 8000678:	2000007c 	.word	0x2000007c

0800067c <fsm_manual_run>:
 */

#include "fsm_manual.h"
#include "global.h"
#include "led_display.h"
void fsm_manual_run(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	switch(status){
 8000680:	4baa      	ldr	r3, [pc, #680]	; (800092c <fsm_manual_run+0x2b0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3b07      	subs	r3, #7
 8000686:	2b0a      	cmp	r3, #10
 8000688:	f200 81c5 	bhi.w	8000a16 <fsm_manual_run+0x39a>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <fsm_manual_run+0x18>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006c1 	.word	0x080006c1
 8000698:	080007d1 	.word	0x080007d1
 800069c:	080008f3 	.word	0x080008f3
 80006a0:	08000a17 	.word	0x08000a17
 80006a4:	08000a17 	.word	0x08000a17
 80006a8:	08000753 	.word	0x08000753
 80006ac:	0800099f 	.word	0x0800099f
 80006b0:	08000863 	.word	0x08000863
 80006b4:	080006fb 	.word	0x080006fb
 80006b8:	08000949 	.word	0x08000949
 80006bc:	0800080b 	.word	0x0800080b
	case MODE2:

		set_led(MAN_RED);
 80006c0:	200c      	movs	r0, #12
 80006c2:	f000 fc19 	bl	8000ef8 <set_led>
		led_index = 0;
 80006c6:	4b9a      	ldr	r3, [pc, #616]	; (8000930 <fsm_manual_run+0x2b4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]

		updateBufferMode2();
 80006cc:	f000 fd82 	bl	80011d4 <updateBufferMode2>
		update7SEG(led_index);
 80006d0:	4b97      	ldr	r3, [pc, #604]	; (8000930 <fsm_manual_run+0x2b4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fc35 	bl	8000f44 <update7SEG>

		setTimer2(500);
 80006da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006de:	f000 ff59 	bl	8001594 <setTimer2>
		setTimer3(500);
 80006e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e6:	f000 ff71 	bl	80015cc <setTimer3>

		clearTimer0();
 80006ea:	f001 f809 	bl	8001700 <clearTimer0>
		clearTimer1();
 80006ee:	f001 f817 	bl	8001720 <clearTimer1>

		status = AUTO_RED;
 80006f2:	4b8e      	ldr	r3, [pc, #568]	; (800092c <fsm_manual_run+0x2b0>)
 80006f4:	220f      	movs	r2, #15
 80006f6:	601a      	str	r2, [r3, #0]

		break;
 80006f8:	e19a      	b.n	8000a30 <fsm_manual_run+0x3b4>

	case AUTO_RED:
		if (timer3_flag == 1){
 80006fa:	4b8e      	ldr	r3, [pc, #568]	; (8000934 <fsm_manual_run+0x2b8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d106      	bne.n	8000710 <fsm_manual_run+0x94>
			setTimer3(500);
 8000702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000706:	f000 ff61 	bl	80015cc <setTimer3>
			set_led(MAN_RED);
 800070a:	200c      	movs	r0, #12
 800070c:	f000 fbf4 	bl	8000ef8 <set_led>
		}
		if (timer2_flag == 1){
 8000710:	4b89      	ldr	r3, [pc, #548]	; (8000938 <fsm_manual_run+0x2bc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d10a      	bne.n	800072e <fsm_manual_run+0xb2>
			setTimer2(500);
 8000718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071c:	f000 ff3a 	bl	8001594 <setTimer2>
			updateBufferMode2();
 8000720:	f000 fd58 	bl	80011d4 <updateBufferMode2>
			update7SEG(led_index);
 8000724:	4b82      	ldr	r3, [pc, #520]	; (8000930 <fsm_manual_run+0x2b4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fc0b 	bl	8000f44 <update7SEG>


		}
		if (isButton1Pressed() == 1){
 800072e:	f7ff fd19 	bl	8000164 <isButton1Pressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d102      	bne.n	800073e <fsm_manual_run+0xc2>
			status = MODE3;
 8000738:	4b7c      	ldr	r3, [pc, #496]	; (800092c <fsm_manual_run+0x2b0>)
 800073a:	2208      	movs	r2, #8
 800073c:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1){
 800073e:	f7ff fd23 	bl	8000188 <isButton2Pressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b01      	cmp	r3, #1
 8000746:	f040 8168 	bne.w	8000a1a <fsm_manual_run+0x39e>
			status = MAN_RED;
 800074a:	4b78      	ldr	r3, [pc, #480]	; (800092c <fsm_manual_run+0x2b0>)
 800074c:	220c      	movs	r2, #12
 800074e:	601a      	str	r2, [r3, #0]

		}
		break;
 8000750:	e163      	b.n	8000a1a <fsm_manual_run+0x39e>

	case MAN_RED:
		if (timer3_flag == 1){
 8000752:	4b78      	ldr	r3, [pc, #480]	; (8000934 <fsm_manual_run+0x2b8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d106      	bne.n	8000768 <fsm_manual_run+0xec>
			setTimer3(500);
 800075a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075e:	f000 ff35 	bl	80015cc <setTimer3>
			set_led(MAN_RED);
 8000762:	200c      	movs	r0, #12
 8000764:	f000 fbc8 	bl	8000ef8 <set_led>
		}
		if (timer2_flag == 1){
 8000768:	4b73      	ldr	r3, [pc, #460]	; (8000938 <fsm_manual_run+0x2bc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d10a      	bne.n	8000786 <fsm_manual_run+0x10a>
			setTimer2(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f000 ff0e 	bl	8001594 <setTimer2>
			updateBufferMode2();
 8000778:	f000 fd2c 	bl	80011d4 <updateBufferMode2>
			update7SEG(led_index);
 800077c:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <fsm_manual_run+0x2b4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fbdf 	bl	8000f44 <update7SEG>

		}
		if (isButton2Pressed() == 1){
 8000786:	f7ff fcff 	bl	8000188 <isButton2Pressed>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10e      	bne.n	80007ae <fsm_manual_run+0x132>
			if (RED >= 99) RED = YEL + 1;
 8000790:	4b6a      	ldr	r3, [pc, #424]	; (800093c <fsm_manual_run+0x2c0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b62      	cmp	r3, #98	; 0x62
 8000796:	dd05      	ble.n	80007a4 <fsm_manual_run+0x128>
 8000798:	4b69      	ldr	r3, [pc, #420]	; (8000940 <fsm_manual_run+0x2c4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a67      	ldr	r2, [pc, #412]	; (800093c <fsm_manual_run+0x2c0>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e004      	b.n	80007ae <fsm_manual_run+0x132>
			else RED++;
 80007a4:	4b65      	ldr	r3, [pc, #404]	; (800093c <fsm_manual_run+0x2c0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a64      	ldr	r2, [pc, #400]	; (800093c <fsm_manual_run+0x2c0>)
 80007ac:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1){
 80007ae:	f7ff fcfd 	bl	80001ac <isButton3Pressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	f040 8132 	bne.w	8000a1e <fsm_manual_run+0x3a2>
			status = AUTO_RED;
 80007ba:	4b5c      	ldr	r3, [pc, #368]	; (800092c <fsm_manual_run+0x2b0>)
 80007bc:	220f      	movs	r2, #15
 80007be:	601a      	str	r2, [r3, #0]
			GREEN = RED - YEL;
 80007c0:	4b5e      	ldr	r3, [pc, #376]	; (800093c <fsm_manual_run+0x2c0>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b5e      	ldr	r3, [pc, #376]	; (8000940 <fsm_manual_run+0x2c4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4a5e      	ldr	r2, [pc, #376]	; (8000944 <fsm_manual_run+0x2c8>)
 80007cc:	6013      	str	r3, [r2, #0]
		}
		break;
 80007ce:	e126      	b.n	8000a1e <fsm_manual_run+0x3a2>
	case MODE3:
		set_led(MAN_YEL);
 80007d0:	200e      	movs	r0, #14
 80007d2:	f000 fb91 	bl	8000ef8 <set_led>

		led_index = 0;
 80007d6:	4b56      	ldr	r3, [pc, #344]	; (8000930 <fsm_manual_run+0x2b4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
		updateBufferMode2();
 80007dc:	f000 fcfa 	bl	80011d4 <updateBufferMode2>
		update7SEG(led_index);
 80007e0:	4b53      	ldr	r3, [pc, #332]	; (8000930 <fsm_manual_run+0x2b4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fbad 	bl	8000f44 <update7SEG>

		setTimer2(500);
 80007ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ee:	f000 fed1 	bl	8001594 <setTimer2>
		setTimer3(500);
 80007f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f6:	f000 fee9 	bl	80015cc <setTimer3>

		clearTimer0();
 80007fa:	f000 ff81 	bl	8001700 <clearTimer0>
		clearTimer1();
 80007fe:	f000 ff8f 	bl	8001720 <clearTimer1>

		status = AUTO_YEL;
 8000802:	4b4a      	ldr	r3, [pc, #296]	; (800092c <fsm_manual_run+0x2b0>)
 8000804:	2211      	movs	r2, #17
 8000806:	601a      	str	r2, [r3, #0]
		break;
 8000808:	e112      	b.n	8000a30 <fsm_manual_run+0x3b4>

	case AUTO_YEL:
		if (timer3_flag == 1){
 800080a:	4b4a      	ldr	r3, [pc, #296]	; (8000934 <fsm_manual_run+0x2b8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d106      	bne.n	8000820 <fsm_manual_run+0x1a4>
			setTimer3(500);
 8000812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000816:	f000 fed9 	bl	80015cc <setTimer3>
			set_led(MAN_YEL);
 800081a:	200e      	movs	r0, #14
 800081c:	f000 fb6c 	bl	8000ef8 <set_led>
		}

		if (timer2_flag == 1){
 8000820:	4b45      	ldr	r3, [pc, #276]	; (8000938 <fsm_manual_run+0x2bc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10a      	bne.n	800083e <fsm_manual_run+0x1c2>
			setTimer2(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f000 feb2 	bl	8001594 <setTimer2>
			updateBufferMode3();
 8000830:	f000 fcfc 	bl	800122c <updateBufferMode3>
			update7SEG(led_index);
 8000834:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <fsm_manual_run+0x2b4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fb83 	bl	8000f44 <update7SEG>

		}

		if (isButton1Pressed() == 1){
 800083e:	f7ff fc91 	bl	8000164 <isButton1Pressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d102      	bne.n	800084e <fsm_manual_run+0x1d2>
			status = MODE4;
 8000848:	4b38      	ldr	r3, [pc, #224]	; (800092c <fsm_manual_run+0x2b0>)
 800084a:	2209      	movs	r2, #9
 800084c:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1){
 800084e:	f7ff fc9b 	bl	8000188 <isButton2Pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	f040 80e4 	bne.w	8000a22 <fsm_manual_run+0x3a6>
			status = MAN_YEL;
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <fsm_manual_run+0x2b0>)
 800085c:	220e      	movs	r2, #14
 800085e:	601a      	str	r2, [r3, #0]

		}
		break;
 8000860:	e0df      	b.n	8000a22 <fsm_manual_run+0x3a6>

	case MAN_YEL:
		if (timer3_flag == 1){
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <fsm_manual_run+0x2b8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d106      	bne.n	8000878 <fsm_manual_run+0x1fc>
			setTimer3(500);
 800086a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086e:	f000 fead 	bl	80015cc <setTimer3>
			set_led(MAN_YEL);
 8000872:	200e      	movs	r0, #14
 8000874:	f000 fb40 	bl	8000ef8 <set_led>
		}

		if (timer2_flag == 1){
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <fsm_manual_run+0x2bc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10a      	bne.n	8000896 <fsm_manual_run+0x21a>
			setTimer2(500);
 8000880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000884:	f000 fe86 	bl	8001594 <setTimer2>
			updateBufferMode3();
 8000888:	f000 fcd0 	bl	800122c <updateBufferMode3>
			update7SEG(led_index);
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <fsm_manual_run+0x2b4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fb57 	bl	8000f44 <update7SEG>

		}

		if (isButton2Pressed() == 1){
 8000896:	f7ff fc77 	bl	8000188 <isButton2Pressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10c      	bne.n	80008ba <fsm_manual_run+0x23e>
			if (YEL >= 99) YEL = 1;
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <fsm_manual_run+0x2c4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b62      	cmp	r3, #98	; 0x62
 80008a6:	dd03      	ble.n	80008b0 <fsm_manual_run+0x234>
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <fsm_manual_run+0x2c4>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e004      	b.n	80008ba <fsm_manual_run+0x23e>
			else YEL++;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <fsm_manual_run+0x2c4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <fsm_manual_run+0x2c4>)
 80008b8:	6013      	str	r3, [r2, #0]
		}

		if (isButton3Pressed() == 1) {
 80008ba:	f7ff fc77 	bl	80001ac <isButton3Pressed>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 80b0 	bne.w	8000a26 <fsm_manual_run+0x3aa>
			status = AUTO_YEL;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <fsm_manual_run+0x2b0>)
 80008c8:	2211      	movs	r2, #17
 80008ca:	601a      	str	r2, [r3, #0]
			if (RED <= YEL) RED = YEL + 1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <fsm_manual_run+0x2c0>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <fsm_manual_run+0x2c4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dc04      	bgt.n	80008e2 <fsm_manual_run+0x266>
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <fsm_manual_run+0x2c4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <fsm_manual_run+0x2c0>)
 80008e0:	6013      	str	r3, [r2, #0]
			GREEN = RED - YEL;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <fsm_manual_run+0x2c0>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <fsm_manual_run+0x2c4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	4a15      	ldr	r2, [pc, #84]	; (8000944 <fsm_manual_run+0x2c8>)
 80008ee:	6013      	str	r3, [r2, #0]
		}
		break;
 80008f0:	e099      	b.n	8000a26 <fsm_manual_run+0x3aa>

	case MODE4:
		set_led(MAN_GRE);
 80008f2:	200d      	movs	r0, #13
 80008f4:	f000 fb00 	bl	8000ef8 <set_led>

		led_index = 0;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <fsm_manual_run+0x2b4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
		updateBufferMode2();
 80008fe:	f000 fc69 	bl	80011d4 <updateBufferMode2>
		update7SEG(led_index);
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <fsm_manual_run+0x2b4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fb1c 	bl	8000f44 <update7SEG>

		setTimer2(500);
 800090c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000910:	f000 fe40 	bl	8001594 <setTimer2>
		setTimer3(500);
 8000914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000918:	f000 fe58 	bl	80015cc <setTimer3>
		clearTimer0();
 800091c:	f000 fef0 	bl	8001700 <clearTimer0>
		clearTimer1();
 8000920:	f000 fefe 	bl	8001720 <clearTimer1>

		status = AUTO_GRE;
 8000924:	4b01      	ldr	r3, [pc, #4]	; (800092c <fsm_manual_run+0x2b0>)
 8000926:	2210      	movs	r2, #16
 8000928:	601a      	str	r2, [r3, #0]
		break;
 800092a:	e081      	b.n	8000a30 <fsm_manual_run+0x3b4>
 800092c:	20000090 	.word	0x20000090
 8000930:	2000007c 	.word	0x2000007c
 8000934:	200000c0 	.word	0x200000c0
 8000938:	200000b8 	.word	0x200000b8
 800093c:	20000040 	.word	0x20000040
 8000940:	20000044 	.word	0x20000044
 8000944:	2000003c 	.word	0x2000003c

	case AUTO_GRE:
		if (timer3_flag == 1){
 8000948:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <fsm_manual_run+0x3b8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d106      	bne.n	800095e <fsm_manual_run+0x2e2>
			setTimer3(500);
 8000950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000954:	f000 fe3a 	bl	80015cc <setTimer3>
			set_led(MAN_GRE);
 8000958:	200d      	movs	r0, #13
 800095a:	f000 facd 	bl	8000ef8 <set_led>
		}

		if (timer2_flag == 1){
 800095e:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <fsm_manual_run+0x3bc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d10a      	bne.n	800097c <fsm_manual_run+0x300>
			setTimer2(500);
 8000966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096a:	f000 fe13 	bl	8001594 <setTimer2>
			updateBufferMode4();
 800096e:	f000 fc89 	bl	8001284 <updateBufferMode4>
			update7SEG(led_index);
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <fsm_manual_run+0x3c0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fae4 	bl	8000f44 <update7SEG>

		}

		if (isButton1Pressed() == 1){
 800097c:	f7ff fbf2 	bl	8000164 <isButton1Pressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d102      	bne.n	800098c <fsm_manual_run+0x310>
			status = MODE1;
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <fsm_manual_run+0x3c4>)
 8000988:	2206      	movs	r2, #6
 800098a:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1){
 800098c:	f7ff fbfc 	bl	8000188 <isButton2Pressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d149      	bne.n	8000a2a <fsm_manual_run+0x3ae>
			status = MAN_GRE;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <fsm_manual_run+0x3c4>)
 8000998:	220d      	movs	r2, #13
 800099a:	601a      	str	r2, [r3, #0]

		}

		break;
 800099c:	e045      	b.n	8000a2a <fsm_manual_run+0x3ae>
	case MAN_GRE:
		if (timer3_flag == 1){
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <fsm_manual_run+0x3b8>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d106      	bne.n	80009b4 <fsm_manual_run+0x338>
			setTimer3(500);
 80009a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009aa:	f000 fe0f 	bl	80015cc <setTimer3>
			set_led(MAN_GRE);
 80009ae:	200d      	movs	r0, #13
 80009b0:	f000 faa2 	bl	8000ef8 <set_led>
		}
		if (timer2_flag == 1){
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <fsm_manual_run+0x3bc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10a      	bne.n	80009d2 <fsm_manual_run+0x356>
			setTimer2(500);
 80009bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c0:	f000 fde8 	bl	8001594 <setTimer2>
			updateBufferMode4();
 80009c4:	f000 fc5e 	bl	8001284 <updateBufferMode4>
			update7SEG(led_index);
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <fsm_manual_run+0x3c0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fab9 	bl	8000f44 <update7SEG>

		}
		if (isButton2Pressed() == 1){
 80009d2:	f7ff fbd9 	bl	8000188 <isButton2Pressed>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d10c      	bne.n	80009f6 <fsm_manual_run+0x37a>
			if (GREEN >= 99) {
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <fsm_manual_run+0x3c8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b62      	cmp	r3, #98	; 0x62
 80009e2:	dd03      	ble.n	80009ec <fsm_manual_run+0x370>
				GREEN = 1;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <fsm_manual_run+0x3c8>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e004      	b.n	80009f6 <fsm_manual_run+0x37a>
			}
			else GREEN++;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <fsm_manual_run+0x3c8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <fsm_manual_run+0x3c8>)
 80009f4:	6013      	str	r3, [r2, #0]

		}
		if (isButton3Pressed() == 1){
 80009f6:	f7ff fbd9 	bl	80001ac <isButton3Pressed>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d116      	bne.n	8000a2e <fsm_manual_run+0x3b2>
			status = AUTO_GRE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <fsm_manual_run+0x3c4>)
 8000a02:	2210      	movs	r2, #16
 8000a04:	601a      	str	r2, [r3, #0]
			RED = GREEN + YEL;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <fsm_manual_run+0x3c8>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <fsm_manual_run+0x3cc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <fsm_manual_run+0x3d0>)
 8000a12:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a14:	e00b      	b.n	8000a2e <fsm_manual_run+0x3b2>
	default:
		break;
 8000a16:	bf00      	nop
 8000a18:	e00a      	b.n	8000a30 <fsm_manual_run+0x3b4>
		break;
 8000a1a:	bf00      	nop
 8000a1c:	e008      	b.n	8000a30 <fsm_manual_run+0x3b4>
		break;
 8000a1e:	bf00      	nop
 8000a20:	e006      	b.n	8000a30 <fsm_manual_run+0x3b4>
		break;
 8000a22:	bf00      	nop
 8000a24:	e004      	b.n	8000a30 <fsm_manual_run+0x3b4>
		break;
 8000a26:	bf00      	nop
 8000a28:	e002      	b.n	8000a30 <fsm_manual_run+0x3b4>
		break;
 8000a2a:	bf00      	nop
 8000a2c:	e000      	b.n	8000a30 <fsm_manual_run+0x3b4>
		break;
 8000a2e:	bf00      	nop
	}
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000c0 	.word	0x200000c0
 8000a38:	200000b8 	.word	0x200000b8
 8000a3c:	2000007c 	.word	0x2000007c
 8000a40:	20000090 	.word	0x20000090
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	20000040 	.word	0x20000040

08000a50 <display7SEG>:
 *  Created on: Nov 7, 2023
 *      Author: mitph
 */
#include "global.h"

void display7SEG(int num){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if (num == 0){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d129      	bne.n	8000ab2 <display7SEG+0x62>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a64:	48d3      	ldr	r0, [pc, #844]	; (8000db4 <display7SEG+0x364>)
 8000a66:	f001 fa20 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a70:	48d0      	ldr	r0, [pc, #832]	; (8000db4 <display7SEG+0x364>)
 8000a72:	f001 fa1a 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	48cd      	ldr	r0, [pc, #820]	; (8000db4 <display7SEG+0x364>)
 8000a7e:	f001 fa14 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	48ca      	ldr	r0, [pc, #808]	; (8000db4 <display7SEG+0x364>)
 8000a8a:	f001 fa0e 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	48c7      	ldr	r0, [pc, #796]	; (8000db4 <display7SEG+0x364>)
 8000a96:	f001 fa08 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa0:	48c4      	ldr	r0, [pc, #784]	; (8000db4 <display7SEG+0x364>)
 8000aa2:	f001 fa02 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aac:	48c1      	ldr	r0, [pc, #772]	; (8000db4 <display7SEG+0x364>)
 8000aae:	f001 f9fc 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 1){
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d129      	bne.n	8000b0c <display7SEG+0xbc>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abe:	48bd      	ldr	r0, [pc, #756]	; (8000db4 <display7SEG+0x364>)
 8000ac0:	f001 f9f3 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aca:	48ba      	ldr	r0, [pc, #744]	; (8000db4 <display7SEG+0x364>)
 8000acc:	f001 f9ed 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad6:	48b7      	ldr	r0, [pc, #732]	; (8000db4 <display7SEG+0x364>)
 8000ad8:	f001 f9e7 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae2:	48b4      	ldr	r0, [pc, #720]	; (8000db4 <display7SEG+0x364>)
 8000ae4:	f001 f9e1 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aee:	48b1      	ldr	r0, [pc, #708]	; (8000db4 <display7SEG+0x364>)
 8000af0:	f001 f9db 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afa:	48ae      	ldr	r0, [pc, #696]	; (8000db4 <display7SEG+0x364>)
 8000afc:	f001 f9d5 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b06:	48ab      	ldr	r0, [pc, #684]	; (8000db4 <display7SEG+0x364>)
 8000b08:	f001 f9cf 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 2){
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d129      	bne.n	8000b66 <display7SEG+0x116>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	48a6      	ldr	r0, [pc, #664]	; (8000db4 <display7SEG+0x364>)
 8000b1a:	f001 f9c6 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b24:	48a3      	ldr	r0, [pc, #652]	; (8000db4 <display7SEG+0x364>)
 8000b26:	f001 f9c0 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b30:	48a0      	ldr	r0, [pc, #640]	; (8000db4 <display7SEG+0x364>)
 8000b32:	f001 f9ba 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3c:	489d      	ldr	r0, [pc, #628]	; (8000db4 <display7SEG+0x364>)
 8000b3e:	f001 f9b4 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b48:	489a      	ldr	r0, [pc, #616]	; (8000db4 <display7SEG+0x364>)
 8000b4a:	f001 f9ae 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b54:	4897      	ldr	r0, [pc, #604]	; (8000db4 <display7SEG+0x364>)
 8000b56:	f001 f9a8 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b60:	4894      	ldr	r0, [pc, #592]	; (8000db4 <display7SEG+0x364>)
 8000b62:	f001 f9a2 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 3){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d129      	bne.n	8000bc0 <display7SEG+0x170>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b72:	4890      	ldr	r0, [pc, #576]	; (8000db4 <display7SEG+0x364>)
 8000b74:	f001 f999 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	488d      	ldr	r0, [pc, #564]	; (8000db4 <display7SEG+0x364>)
 8000b80:	f001 f993 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8a:	488a      	ldr	r0, [pc, #552]	; (8000db4 <display7SEG+0x364>)
 8000b8c:	f001 f98d 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b96:	4887      	ldr	r0, [pc, #540]	; (8000db4 <display7SEG+0x364>)
 8000b98:	f001 f987 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba2:	4884      	ldr	r0, [pc, #528]	; (8000db4 <display7SEG+0x364>)
 8000ba4:	f001 f981 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bae:	4881      	ldr	r0, [pc, #516]	; (8000db4 <display7SEG+0x364>)
 8000bb0:	f001 f97b 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bba:	487e      	ldr	r0, [pc, #504]	; (8000db4 <display7SEG+0x364>)
 8000bbc:	f001 f975 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 4){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d129      	bne.n	8000c1a <display7SEG+0x1ca>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bcc:	4879      	ldr	r0, [pc, #484]	; (8000db4 <display7SEG+0x364>)
 8000bce:	f001 f96c 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd8:	4876      	ldr	r0, [pc, #472]	; (8000db4 <display7SEG+0x364>)
 8000bda:	f001 f966 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be4:	4873      	ldr	r0, [pc, #460]	; (8000db4 <display7SEG+0x364>)
 8000be6:	f001 f960 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf0:	4870      	ldr	r0, [pc, #448]	; (8000db4 <display7SEG+0x364>)
 8000bf2:	f001 f95a 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfc:	486d      	ldr	r0, [pc, #436]	; (8000db4 <display7SEG+0x364>)
 8000bfe:	f001 f954 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c08:	486a      	ldr	r0, [pc, #424]	; (8000db4 <display7SEG+0x364>)
 8000c0a:	f001 f94e 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c14:	4867      	ldr	r0, [pc, #412]	; (8000db4 <display7SEG+0x364>)
 8000c16:	f001 f948 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 5){
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b05      	cmp	r3, #5
 8000c1e:	d129      	bne.n	8000c74 <display7SEG+0x224>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c26:	4863      	ldr	r0, [pc, #396]	; (8000db4 <display7SEG+0x364>)
 8000c28:	f001 f93f 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	4860      	ldr	r0, [pc, #384]	; (8000db4 <display7SEG+0x364>)
 8000c34:	f001 f939 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3e:	485d      	ldr	r0, [pc, #372]	; (8000db4 <display7SEG+0x364>)
 8000c40:	f001 f933 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4a:	485a      	ldr	r0, [pc, #360]	; (8000db4 <display7SEG+0x364>)
 8000c4c:	f001 f92d 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4857      	ldr	r0, [pc, #348]	; (8000db4 <display7SEG+0x364>)
 8000c58:	f001 f927 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c62:	4854      	ldr	r0, [pc, #336]	; (8000db4 <display7SEG+0x364>)
 8000c64:	f001 f921 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6e:	4851      	ldr	r0, [pc, #324]	; (8000db4 <display7SEG+0x364>)
 8000c70:	f001 f91b 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 6){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d129      	bne.n	8000cce <display7SEG+0x27e>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c80:	484c      	ldr	r0, [pc, #304]	; (8000db4 <display7SEG+0x364>)
 8000c82:	f001 f912 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8c:	4849      	ldr	r0, [pc, #292]	; (8000db4 <display7SEG+0x364>)
 8000c8e:	f001 f90c 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c98:	4846      	ldr	r0, [pc, #280]	; (8000db4 <display7SEG+0x364>)
 8000c9a:	f001 f906 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	4843      	ldr	r0, [pc, #268]	; (8000db4 <display7SEG+0x364>)
 8000ca6:	f001 f900 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <display7SEG+0x364>)
 8000cb2:	f001 f8fa 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbc:	483d      	ldr	r0, [pc, #244]	; (8000db4 <display7SEG+0x364>)
 8000cbe:	f001 f8f4 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc8:	483a      	ldr	r0, [pc, #232]	; (8000db4 <display7SEG+0x364>)
 8000cca:	f001 f8ee 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 7){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d129      	bne.n	8000d28 <display7SEG+0x2d8>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cda:	4836      	ldr	r0, [pc, #216]	; (8000db4 <display7SEG+0x364>)
 8000cdc:	f001 f8e5 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce6:	4833      	ldr	r0, [pc, #204]	; (8000db4 <display7SEG+0x364>)
 8000ce8:	f001 f8df 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	4830      	ldr	r0, [pc, #192]	; (8000db4 <display7SEG+0x364>)
 8000cf4:	f001 f8d9 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	482d      	ldr	r0, [pc, #180]	; (8000db4 <display7SEG+0x364>)
 8000d00:	f001 f8d3 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	482a      	ldr	r0, [pc, #168]	; (8000db4 <display7SEG+0x364>)
 8000d0c:	f001 f8cd 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	4827      	ldr	r0, [pc, #156]	; (8000db4 <display7SEG+0x364>)
 8000d18:	f001 f8c7 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d22:	4824      	ldr	r0, [pc, #144]	; (8000db4 <display7SEG+0x364>)
 8000d24:	f001 f8c1 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 8){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d129      	bne.n	8000d82 <display7SEG+0x332>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	481f      	ldr	r0, [pc, #124]	; (8000db4 <display7SEG+0x364>)
 8000d36:	f001 f8b8 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d40:	481c      	ldr	r0, [pc, #112]	; (8000db4 <display7SEG+0x364>)
 8000d42:	f001 f8b2 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4c:	4819      	ldr	r0, [pc, #100]	; (8000db4 <display7SEG+0x364>)
 8000d4e:	f001 f8ac 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d58:	4816      	ldr	r0, [pc, #88]	; (8000db4 <display7SEG+0x364>)
 8000d5a:	f001 f8a6 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <display7SEG+0x364>)
 8000d66:	f001 f8a0 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <display7SEG+0x364>)
 8000d72:	f001 f89a 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <display7SEG+0x364>)
 8000d7e:	f001 f894 	bl	8001eaa <HAL_GPIO_WritePin>
	}
	if (num == 9) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d12c      	bne.n	8000de2 <display7SEG+0x392>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	4809      	ldr	r0, [pc, #36]	; (8000db4 <display7SEG+0x364>)
 8000d90:	f001 f88b 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <display7SEG+0x364>)
 8000d9c:	f001 f885 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <display7SEG+0x364>)
 8000da8:	f001 f87f 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db2:	e001      	b.n	8000db8 <display7SEG+0x368>
 8000db4:	40010800 	.word	0x40010800
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <display7SEG+0x39c>)
 8000dba:	f001 f876 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <display7SEG+0x39c>)
 8000dc6:	f001 f870 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <display7SEG+0x39c>)
 8000dd2:	f001 f86a 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <display7SEG+0x39c>)
 8000dde:	f001 f864 	bl	8001eaa <HAL_GPIO_WritePin>
	}
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010800 	.word	0x40010800

08000df0 <setRED1>:



void setRED1(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <setRED1+0x28>)
 8000dfa:	f001 f856 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_HOR_GPIO_Port, GRE_HOR_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2108      	movs	r1, #8
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <setRED1+0x28>)
 8000e04:	f001 f851 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_HOR_GPIO_Port, YEL_HOR_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <setRED1+0x28>)
 8000e0e:	f001 f84c 	bl	8001eaa <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010800 	.word	0x40010800

08000e1c <setRED2>:
void setRED2(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <setRED2+0x28>)
 8000e26:	f001 f840 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_VER_GPIO_Port, GRE_VER_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <setRED2+0x28>)
 8000e30:	f001 f83b 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_VER_GPIO_Port, YEL_VER_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2120      	movs	r1, #32
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <setRED2+0x28>)
 8000e3a:	f001 f836 	bl	8001eaa <HAL_GPIO_WritePin>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010800 	.word	0x40010800

08000e48 <setGRE1>:
void setGRE1(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <setGRE1+0x28>)
 8000e52:	f001 f82a 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_HOR_GPIO_Port, GRE_HOR_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <setGRE1+0x28>)
 8000e5c:	f001 f825 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_HOR_GPIO_Port, YEL_HOR_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2104      	movs	r1, #4
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <setGRE1+0x28>)
 8000e66:	f001 f820 	bl	8001eaa <HAL_GPIO_WritePin>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010800 	.word	0x40010800

08000e74 <setGRE2>:
void setGRE2(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <setGRE2+0x28>)
 8000e7e:	f001 f814 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_VER_GPIO_Port, GRE_VER_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2140      	movs	r1, #64	; 0x40
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <setGRE2+0x28>)
 8000e88:	f001 f80f 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_VER_GPIO_Port, YEL_VER_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2120      	movs	r1, #32
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <setGRE2+0x28>)
 8000e92:	f001 f80a 	bl	8001eaa <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <setYEL1>:
void setYEL1(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <setYEL1+0x28>)
 8000eaa:	f000 fffe 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_HOR_GPIO_Port, GRE_HOR_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <setYEL1+0x28>)
 8000eb4:	f000 fff9 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_HOR_GPIO_Port, YEL_HOR_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <setYEL1+0x28>)
 8000ebe:	f000 fff4 	bl	8001eaa <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010800 	.word	0x40010800

08000ecc <setYEL2>:
void setYEL2(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <setYEL2+0x28>)
 8000ed6:	f000 ffe8 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_VER_GPIO_Port, GRE_VER_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <setYEL2+0x28>)
 8000ee0:	f000 ffe3 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_VER_GPIO_Port, YEL_VER_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <setYEL2+0x28>)
 8000eea:	f000 ffde 	bl	8001eaa <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <set_led>:

void set_led(int status){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	switch(status){
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b0e      	cmp	r3, #14
 8000f04:	d013      	beq.n	8000f2e <set_led+0x36>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0e      	cmp	r3, #14
 8000f0a:	dc15      	bgt.n	8000f38 <set_led+0x40>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b0c      	cmp	r3, #12
 8000f10:	d003      	beq.n	8000f1a <set_led+0x22>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0d      	cmp	r3, #13
 8000f16:	d005      	beq.n	8000f24 <set_led+0x2c>
	case MAN_YEL:
		setYEL1();
		setYEL2();
		break;
	default:
		break;
 8000f18:	e00e      	b.n	8000f38 <set_led+0x40>
		setRED1();
 8000f1a:	f7ff ff69 	bl	8000df0 <setRED1>
		setRED2();
 8000f1e:	f7ff ff7d 	bl	8000e1c <setRED2>
		break;
 8000f22:	e00a      	b.n	8000f3a <set_led+0x42>
		setGRE1();
 8000f24:	f7ff ff90 	bl	8000e48 <setGRE1>
		setGRE2();
 8000f28:	f7ff ffa4 	bl	8000e74 <setGRE2>
		break;
 8000f2c:	e005      	b.n	8000f3a <set_led+0x42>
		setYEL1();
 8000f2e:	f7ff ffb7 	bl	8000ea0 <setYEL1>
		setYEL2();
 8000f32:	f7ff ffcb 	bl	8000ecc <setYEL2>
		break;
 8000f36:	e000      	b.n	8000f3a <set_led+0x42>
		break;
 8000f38:	bf00      	nop
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <update7SEG>:
	}
}
const int MAX_LED = 4;

int led_buffer[4] = {0, 0, 0, 0};
void update7SEG(int *led_index){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	switch (*led_index){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d873      	bhi.n	800103c <update7SEG+0xf8>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <update7SEG+0x18>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000fa1 	.word	0x08000fa1
 8000f64:	08000fd5 	.word	0x08000fd5
 8000f68:	08001009 	.word	0x08001009
		case 0:
			//Display the first 7SEG with led_buffer[0]

			display7SEG(led_buffer[0]);
 8000f6c:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <update7SEG+0x11c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fd6d 	bl	8000a50 <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2101      	movs	r1, #1
 8000f7a:	483a      	ldr	r0, [pc, #232]	; (8001064 <update7SEG+0x120>)
 8000f7c:	f000 ff95 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2102      	movs	r1, #2
 8000f84:	4837      	ldr	r0, [pc, #220]	; (8001064 <update7SEG+0x120>)
 8000f86:	f000 ff90 	bl	8001eaa <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4835      	ldr	r0, [pc, #212]	; (8001064 <update7SEG+0x120>)
 8000f90:	f000 ff8b 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4832      	ldr	r0, [pc, #200]	; (8001064 <update7SEG+0x120>)
 8000f9a:	f000 ff86 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000f9e:	e04e      	b.n	800103e <update7SEG+0xfa>
		case 1:
			//Display the first 7SEG with led_buffer[1]

			display7SEG(led_buffer[1]);
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <update7SEG+0x11c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd53 	bl	8000a50 <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2101      	movs	r1, #1
 8000fae:	482d      	ldr	r0, [pc, #180]	; (8001064 <update7SEG+0x120>)
 8000fb0:	f000 ff7b 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	482a      	ldr	r0, [pc, #168]	; (8001064 <update7SEG+0x120>)
 8000fba:	f000 ff76 	bl	8001eaa <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4828      	ldr	r0, [pc, #160]	; (8001064 <update7SEG+0x120>)
 8000fc4:	f000 ff71 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2108      	movs	r1, #8
 8000fcc:	4825      	ldr	r0, [pc, #148]	; (8001064 <update7SEG+0x120>)
 8000fce:	f000 ff6c 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000fd2:	e034      	b.n	800103e <update7SEG+0xfa>
		case 2:
			//Display the first 7SEG with led_buffer[2]

			display7SEG(led_buffer[2]);
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <update7SEG+0x11c>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fd39 	bl	8000a50 <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4820      	ldr	r0, [pc, #128]	; (8001064 <update7SEG+0x120>)
 8000fe4:	f000 ff61 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2102      	movs	r1, #2
 8000fec:	481d      	ldr	r0, [pc, #116]	; (8001064 <update7SEG+0x120>)
 8000fee:	f000 ff5c 	bl	8001eaa <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <update7SEG+0x120>)
 8000ff8:	f000 ff57 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2108      	movs	r1, #8
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <update7SEG+0x120>)
 8001002:	f000 ff52 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8001006:	e01a      	b.n	800103e <update7SEG+0xfa>
		case 3:
			//Display the first 7SEG with led_buffer[3]

			display7SEG(led_buffer[3]);
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <update7SEG+0x11c>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fd1f 	bl	8000a50 <display7SEG>
  		  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2101      	movs	r1, #1
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <update7SEG+0x120>)
 8001018:	f000 ff47 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2102      	movs	r1, #2
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <update7SEG+0x120>)
 8001022:	f000 ff42 	bl	8001eaa <HAL_GPIO_WritePin>
 		  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2104      	movs	r1, #4
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <update7SEG+0x120>)
 800102c:	f000 ff3d 	bl	8001eaa <HAL_GPIO_WritePin>
  		  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2108      	movs	r1, #8
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <update7SEG+0x120>)
 8001036:	f000 ff38 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 800103a:	e000      	b.n	800103e <update7SEG+0xfa>
		default:
			break;
 800103c:	bf00      	nop
	}
	if (*led_index >= 3) *led_index = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b02      	cmp	r3, #2
 8001044:	dd03      	ble.n	800104e <update7SEG+0x10a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	else *led_index = *led_index + 1;
}
 800104c:	e004      	b.n	8001058 <update7SEG+0x114>
	else *led_index = *led_index + 1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000094 	.word	0x20000094
 8001064:	40010c00 	.word	0x40010c00

08001068 <updateBufferMode1>:

void updateBufferMode1(int status){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b02      	subs	r3, #2
 8001074:	2b03      	cmp	r3, #3
 8001076:	f200 8095 	bhi.w	80011a4 <updateBufferMode1+0x13c>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <updateBufferMode1+0x18>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	08001091 	.word	0x08001091
 8001084:	080010c9 	.word	0x080010c9
 8001088:	0800110b 	.word	0x0800110b
 800108c:	08001143 	.word	0x08001143
	switch(status){
	case RED1_GRE2:
		led_buffer[0] = RED - counter0;
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <updateBufferMode1+0x14c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <updateBufferMode1+0x150>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	4a48      	ldr	r2, [pc, #288]	; (80011bc <updateBufferMode1+0x154>)
 800109c:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <updateBufferMode1+0x154>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a46      	ldr	r2, [pc, #280]	; (80011bc <updateBufferMode1+0x154>)
 80010a4:	6093      	str	r3, [r2, #8]
		led_buffer[1] = GREEN - counter0;
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <updateBufferMode1+0x158>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <updateBufferMode1+0x150>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	4a42      	ldr	r2, [pc, #264]	; (80011bc <updateBufferMode1+0x154>)
 80010b2:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 80010b4:	4b41      	ldr	r3, [pc, #260]	; (80011bc <updateBufferMode1+0x154>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a40      	ldr	r2, [pc, #256]	; (80011bc <updateBufferMode1+0x154>)
 80010ba:	60d3      	str	r3, [r2, #12]
		counter0++;
 80010bc:	4b3e      	ldr	r3, [pc, #248]	; (80011b8 <updateBufferMode1+0x150>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <updateBufferMode1+0x150>)
 80010c4:	6013      	str	r3, [r2, #0]
		break;
 80010c6:	e070      	b.n	80011aa <updateBufferMode1+0x142>

	case RED1_YEL2:
		led_buffer[0] = RED - counter0;
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <updateBufferMode1+0x14c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <updateBufferMode1+0x150>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <updateBufferMode1+0x154>)
 80010d4:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 80010d6:	4b39      	ldr	r3, [pc, #228]	; (80011bc <updateBufferMode1+0x154>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a38      	ldr	r2, [pc, #224]	; (80011bc <updateBufferMode1+0x154>)
 80010dc:	6093      	str	r3, [r2, #8]
		led_buffer[1] = YEL - counter1;
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <updateBufferMode1+0x15c>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <updateBufferMode1+0x160>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	4a34      	ldr	r2, [pc, #208]	; (80011bc <updateBufferMode1+0x154>)
 80010ea:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <updateBufferMode1+0x154>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a32      	ldr	r2, [pc, #200]	; (80011bc <updateBufferMode1+0x154>)
 80010f2:	60d3      	str	r3, [r2, #12]
		counter0++;
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <updateBufferMode1+0x150>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <updateBufferMode1+0x150>)
 80010fc:	6013      	str	r3, [r2, #0]
		counter1++;
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <updateBufferMode1+0x160>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <updateBufferMode1+0x160>)
 8001106:	6013      	str	r3, [r2, #0]

		break;
 8001108:	e04f      	b.n	80011aa <updateBufferMode1+0x142>

	case GRE1_RED2:
		led_buffer[0] = GREEN - counter2;  // 5
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <updateBufferMode1+0x158>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <updateBufferMode1+0x164>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <updateBufferMode1+0x154>)
 8001116:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <updateBufferMode1+0x154>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <updateBufferMode1+0x154>)
 800111e:	6093      	str	r3, [r2, #8]
		led_buffer[1] = RED - counter2; // 3
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <updateBufferMode1+0x14c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <updateBufferMode1+0x164>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <updateBufferMode1+0x154>)
 800112c:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <updateBufferMode1+0x154>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <updateBufferMode1+0x154>)
 8001134:	60d3      	str	r3, [r2, #12]
		counter2++;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <updateBufferMode1+0x164>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a23      	ldr	r2, [pc, #140]	; (80011cc <updateBufferMode1+0x164>)
 800113e:	6013      	str	r3, [r2, #0]
		break;
 8001140:	e033      	b.n	80011aa <updateBufferMode1+0x142>
	case YEL1_RED2:
		led_buffer[1] = RED - counter2; // 3
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <updateBufferMode1+0x14c>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <updateBufferMode1+0x164>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <updateBufferMode1+0x154>)
 800114e:	6053      	str	r3, [r2, #4]
		led_buffer[3] = led_buffer[1];
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <updateBufferMode1+0x154>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <updateBufferMode1+0x154>)
 8001156:	60d3      	str	r3, [r2, #12]
		led_buffer[0] = YEL - counter3;  // 5
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <updateBufferMode1+0x15c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <updateBufferMode1+0x168>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <updateBufferMode1+0x154>)
 8001164:	6013      	str	r3, [r2, #0]
		led_buffer[2] = led_buffer[0];
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <updateBufferMode1+0x154>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <updateBufferMode1+0x154>)
 800116c:	6093      	str	r3, [r2, #8]
		counter2++;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <updateBufferMode1+0x164>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <updateBufferMode1+0x164>)
 8001176:	6013      	str	r3, [r2, #0]
		counter3++;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <updateBufferMode1+0x168>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <updateBufferMode1+0x168>)
 8001180:	6013      	str	r3, [r2, #0]
		if (led_buffer[0] <= 1) {
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <updateBufferMode1+0x154>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	dc0e      	bgt.n	80011a8 <updateBufferMode1+0x140>
			counter0 = 0;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <updateBufferMode1+0x150>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
			counter1 = 0;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <updateBufferMode1+0x160>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <updateBufferMode1+0x164>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
			counter3 = 0;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <updateBufferMode1+0x168>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
		}
		break;
 80011a2:	e001      	b.n	80011a8 <updateBufferMode1+0x140>
	default:
		break;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <updateBufferMode1+0x142>
		break;
 80011a8:	bf00      	nop
	}
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000040 	.word	0x20000040
 80011b8:	20000080 	.word	0x20000080
 80011bc:	20000094 	.word	0x20000094
 80011c0:	2000003c 	.word	0x2000003c
 80011c4:	20000044 	.word	0x20000044
 80011c8:	20000084 	.word	0x20000084
 80011cc:	20000088 	.word	0x20000088
 80011d0:	2000008c 	.word	0x2000008c

080011d4 <updateBufferMode2>:

void updateBufferMode2(){
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	led_buffer[0] = 2;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <updateBufferMode2+0x4c>)
 80011da:	2202      	movs	r2, #2
 80011dc:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <updateBufferMode2+0x4c>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	605a      	str	r2, [r3, #4]
	led_buffer[2] = RED/10;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <updateBufferMode2+0x50>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <updateBufferMode2+0x54>)
 80011ea:	fb82 1203 	smull	r1, r2, r2, r3
 80011ee:	1092      	asrs	r2, r2, #2
 80011f0:	17db      	asrs	r3, r3, #31
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <updateBufferMode2+0x4c>)
 80011f6:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <updateBufferMode2+0x50>)
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <updateBufferMode2+0x54>)
 80011fe:	fb83 2301 	smull	r2, r3, r3, r1
 8001202:	109a      	asrs	r2, r3, #2
 8001204:	17cb      	asrs	r3, r1, #31
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	1aca      	subs	r2, r1, r3
 8001212:	4b03      	ldr	r3, [pc, #12]	; (8001220 <updateBufferMode2+0x4c>)
 8001214:	60da      	str	r2, [r3, #12]
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000094 	.word	0x20000094
 8001224:	20000040 	.word	0x20000040
 8001228:	66666667 	.word	0x66666667

0800122c <updateBufferMode3>:
void updateBufferMode3(){
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	led_buffer[0] = 3;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <updateBufferMode3+0x4c>)
 8001232:	2203      	movs	r2, #3
 8001234:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <updateBufferMode3+0x4c>)
 8001238:	2203      	movs	r2, #3
 800123a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = YEL/10;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <updateBufferMode3+0x50>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <updateBufferMode3+0x54>)
 8001242:	fb82 1203 	smull	r1, r2, r2, r3
 8001246:	1092      	asrs	r2, r2, #2
 8001248:	17db      	asrs	r3, r3, #31
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <updateBufferMode3+0x4c>)
 800124e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = YEL % 10;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <updateBufferMode3+0x50>)
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <updateBufferMode3+0x54>)
 8001256:	fb83 2301 	smull	r2, r3, r3, r1
 800125a:	109a      	asrs	r2, r3, #2
 800125c:	17cb      	asrs	r3, r1, #31
 800125e:	1ad2      	subs	r2, r2, r3
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	1aca      	subs	r2, r1, r3
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <updateBufferMode3+0x4c>)
 800126c:	60da      	str	r2, [r3, #12]
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000094 	.word	0x20000094
 800127c:	20000044 	.word	0x20000044
 8001280:	66666667 	.word	0x66666667

08001284 <updateBufferMode4>:
void updateBufferMode4(){
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	led_buffer[0] = 4;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <updateBufferMode4+0x4c>)
 800128a:	2204      	movs	r2, #4
 800128c:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <updateBufferMode4+0x4c>)
 8001290:	2204      	movs	r2, #4
 8001292:	605a      	str	r2, [r3, #4]
	led_buffer[2] = GREEN/10;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <updateBufferMode4+0x50>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <updateBufferMode4+0x54>)
 800129a:	fb82 1203 	smull	r1, r2, r2, r3
 800129e:	1092      	asrs	r2, r2, #2
 80012a0:	17db      	asrs	r3, r3, #31
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <updateBufferMode4+0x4c>)
 80012a6:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <updateBufferMode4+0x50>)
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <updateBufferMode4+0x54>)
 80012ae:	fb83 2301 	smull	r2, r3, r3, r1
 80012b2:	109a      	asrs	r2, r3, #2
 80012b4:	17cb      	asrs	r3, r1, #31
 80012b6:	1ad2      	subs	r2, r2, r3
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	1aca      	subs	r2, r1, r3
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <updateBufferMode4+0x4c>)
 80012c4:	60da      	str	r2, [r3, #12]
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000094 	.word	0x20000094
 80012d4:	2000003c 	.word	0x2000003c
 80012d8:	66666667 	.word	0x66666667

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f000 fae2 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 f814 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 f89a 	bl	8001420 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012ec:	f000 f84c 	bl	8001388 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <main+0x2c>)
 80012f2:	f001 fa1f 	bl	8002734 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = INIT;
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <main+0x30>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_manual_run();
 80012fc:	f7ff f9be 	bl	800067c <fsm_manual_run>
	  fsm_automatic_run();
 8001300:	f7ff f878 	bl	80003f4 <fsm_automatic_run>
	  fsm_manual_run();
 8001304:	e7fa      	b.n	80012fc <main+0x20>
 8001306:	bf00      	nop
 8001308:	200000d4 	.word	0x200000d4
 800130c:	20000090 	.word	0x20000090

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	2228      	movs	r2, #40	; 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fdc4 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133a:	2310      	movs	r3, #16
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fdc8 	bl	8001edc <HAL_RCC_OscConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001352:	f000 f8e1 	bl	8001518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001356:	230f      	movs	r3, #15
 8001358:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f001 f834 	bl	80023dc <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800137a:	f000 f8cd 	bl	8001518 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3740      	adds	r7, #64	; 0x40
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM2_Init+0x94>)
 80013a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_TIM2_Init+0x94>)
 80013ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_TIM2_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_TIM2_Init+0x94>)
 80013bc:	2209      	movs	r2, #9
 80013be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_TIM2_Init+0x94>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_TIM2_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <MX_TIM2_Init+0x94>)
 80013ce:	f001 f961 	bl	8002694 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013d8:	f000 f89e 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_TIM2_Init+0x94>)
 80013ea:	f001 faf7 	bl	80029dc <HAL_TIM_ConfigClockSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013f4:	f000 f890 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_TIM2_Init+0x94>)
 8001406:	f001 fcc3 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001410:	f000 f882 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000d4 	.word	0x200000d4

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_HOR_Pin|YEL_HOR_Pin|GRE_HOR_Pin|RED_VER_Pin
 800147c:	2200      	movs	r2, #0
 800147e:	f64f 617e 	movw	r1, #65150	; 0xfe7e
 8001482:	481c      	ldr	r0, [pc, #112]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001484:	f000 fd11 	bl	8001eaa <HAL_GPIO_WritePin>
                          |YEL_VER_Pin|GRE_VER_Pin|a_Pin|b_Pin
                          |c_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	210f      	movs	r1, #15
 800148c:	481a      	ldr	r0, [pc, #104]	; (80014f8 <MX_GPIO_Init+0xd8>)
 800148e:	f000 fd0c 	bl	8001eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8001492:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149c:	2301      	movs	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	4815      	ldr	r0, [pc, #84]	; (80014fc <MX_GPIO_Init+0xdc>)
 80014a8:	f000 fb6e 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_HOR_Pin YEL_HOR_Pin GRE_HOR_Pin RED_VER_Pin
                           YEL_VER_Pin GRE_VER_Pin a_Pin b_Pin
                           c_Pin d_Pin e_Pin f_Pin
                           g_Pin */
  GPIO_InitStruct.Pin = RED_HOR_Pin|YEL_HOR_Pin|GRE_HOR_Pin|RED_VER_Pin
 80014ac:	f64f 637e 	movw	r3, #65150	; 0xfe7e
 80014b0:	613b      	str	r3, [r7, #16]
                          |YEL_VER_Pin|GRE_VER_Pin|a_Pin|b_Pin
                          |c_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014c6:	f000 fb5f 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 80014ca:	230f      	movs	r3, #15
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_GPIO_Init+0xd8>)
 80014e2:	f000 fb51 	bl	8001b88 <HAL_GPIO_Init>

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40011000 	.word	0x40011000

08001500 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	timerRun();
 8001508:	f000 f87c 	bl	8001604 <timerRun>
	getKeyInputFor3Button();
 800150c:	f7fe ff68 	bl	80003e0 <getKeyInputFor3Button>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <setTimer0>:
int timer4_flag = 0;

int timer5_counter = 0;
int timer5_flag = 0;

void setTimer0(int duration){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TICK;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <setTimer0+0x2c>)
 8001530:	fb82 1203 	smull	r1, r2, r2, r3
 8001534:	1092      	asrs	r2, r2, #2
 8001536:	17db      	asrs	r3, r3, #31
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	4a06      	ldr	r2, [pc, #24]	; (8001554 <setTimer0+0x30>)
 800153c:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <setTimer0+0x34>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	66666667 	.word	0x66666667
 8001554:	200000a4 	.word	0x200000a4
 8001558:	200000a8 	.word	0x200000a8

0800155c <setTimer1>:
void setTimer1(int duration){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <setTimer1+0x2c>)
 8001568:	fb82 1203 	smull	r1, r2, r2, r3
 800156c:	1092      	asrs	r2, r2, #2
 800156e:	17db      	asrs	r3, r3, #31
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	4a06      	ldr	r2, [pc, #24]	; (800158c <setTimer1+0x30>)
 8001574:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <setTimer1+0x34>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	66666667 	.word	0x66666667
 800158c:	200000ac 	.word	0x200000ac
 8001590:	200000b0 	.word	0x200000b0

08001594 <setTimer2>:
void setTimer2(int duration){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <setTimer2+0x2c>)
 80015a0:	fb82 1203 	smull	r1, r2, r2, r3
 80015a4:	1092      	asrs	r2, r2, #2
 80015a6:	17db      	asrs	r3, r3, #31
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <setTimer2+0x30>)
 80015ac:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <setTimer2+0x34>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	66666667 	.word	0x66666667
 80015c4:	200000b4 	.word	0x200000b4
 80015c8:	200000b8 	.word	0x200000b8

080015cc <setTimer3>:
void setTimer3(int duration){
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <setTimer3+0x2c>)
 80015d8:	fb82 1203 	smull	r1, r2, r2, r3
 80015dc:	1092      	asrs	r2, r2, #2
 80015de:	17db      	asrs	r3, r3, #31
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	4a06      	ldr	r2, [pc, #24]	; (80015fc <setTimer3+0x30>)
 80015e4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <setTimer3+0x34>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	66666667 	.word	0x66666667
 80015fc:	200000bc 	.word	0x200000bc
 8001600:	200000c0 	.word	0x200000c0

08001604 <timerRun>:
}
void setTimer5(int duration){
	timer5_counter = duration/TICK;
	timer5_flag = 0;
}
void timerRun(){
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	//Timer0
	if (timer0_counter > 0){
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <timerRun+0xcc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	dd0b      	ble.n	8001628 <timerRun+0x24>
		timer0_counter--;
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <timerRun+0xcc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a2e      	ldr	r2, [pc, #184]	; (80016d0 <timerRun+0xcc>)
 8001618:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0) {
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <timerRun+0xcc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dc02      	bgt.n	8001628 <timerRun+0x24>
			timer0_flag = 1;
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <timerRun+0xd0>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer1
	if (timer1_counter > 0){
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <timerRun+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd0b      	ble.n	8001648 <timerRun+0x44>
		timer1_counter--;
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <timerRun+0xd4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3b01      	subs	r3, #1
 8001636:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <timerRun+0xd4>)
 8001638:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <timerRun+0xd4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	dc02      	bgt.n	8001648 <timerRun+0x44>
			timer1_flag = 1;
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <timerRun+0xd8>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer2
	if (timer2_counter > 0){
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <timerRun+0xdc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dd0b      	ble.n	8001668 <timerRun+0x64>
		timer2_counter--;
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <timerRun+0xdc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	4a22      	ldr	r2, [pc, #136]	; (80016e0 <timerRun+0xdc>)
 8001658:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <timerRun+0xdc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	dc02      	bgt.n	8001668 <timerRun+0x64>
			timer2_flag = 1;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <timerRun+0xe0>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer3
	if (timer3_counter > 0){
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <timerRun+0xe4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	dd0b      	ble.n	8001688 <timerRun+0x84>
		timer3_counter--;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <timerRun+0xe4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <timerRun+0xe4>)
 8001678:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <timerRun+0xe4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	dc02      	bgt.n	8001688 <timerRun+0x84>
			timer3_flag = 1;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <timerRun+0xe8>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer4
	if (timer4_counter > 0){
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <timerRun+0xec>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dd0b      	ble.n	80016a8 <timerRun+0xa4>
		timer4_counter--;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <timerRun+0xec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	4a16      	ldr	r2, [pc, #88]	; (80016f0 <timerRun+0xec>)
 8001698:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <timerRun+0xec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	dc02      	bgt.n	80016a8 <timerRun+0xa4>
			timer4_flag = 1;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <timerRun+0xf0>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
		}
	}
	//Timer5
	if (timer5_counter > 0){
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <timerRun+0xf4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dd0b      	ble.n	80016c8 <timerRun+0xc4>
		timer5_counter--;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <timerRun+0xf4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <timerRun+0xf4>)
 80016b8:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <timerRun+0xf4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	dc02      	bgt.n	80016c8 <timerRun+0xc4>
			timer5_flag = 1;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <timerRun+0xf8>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200000a4 	.word	0x200000a4
 80016d4:	200000a8 	.word	0x200000a8
 80016d8:	200000ac 	.word	0x200000ac
 80016dc:	200000b0 	.word	0x200000b0
 80016e0:	200000b4 	.word	0x200000b4
 80016e4:	200000b8 	.word	0x200000b8
 80016e8:	200000bc 	.word	0x200000bc
 80016ec:	200000c0 	.word	0x200000c0
 80016f0:	200000c4 	.word	0x200000c4
 80016f4:	200000c8 	.word	0x200000c8
 80016f8:	200000cc 	.word	0x200000cc
 80016fc:	200000d0 	.word	0x200000d0

08001700 <clearTimer0>:

void clearTimer0(){
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	timer0_flag = 0;
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <clearTimer0+0x18>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	timer0_counter = 0;
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <clearTimer0+0x1c>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	200000a8 	.word	0x200000a8
 800171c:	200000a4 	.word	0x200000a4

08001720 <clearTimer1>:
void clearTimer1(){
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	timer1_flag = 0;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <clearTimer1+0x18>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
	timer1_counter = 0;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <clearTimer1+0x1c>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	200000b0 	.word	0x200000b0
 800173c:	200000ac 	.word	0x200000ac

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b4:	d113      	bne.n	80017de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_TIM_Base_MspInit+0x44>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_TIM_Base_MspInit+0x44>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	61d3      	str	r3, [r2, #28]
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_TIM_Base_MspInit+0x44>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	201c      	movs	r0, #28
 80017d4:	f000 f9a1 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d8:	201c      	movs	r0, #28
 80017da:	f000 f9ba 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f87f 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM2_IRQHandler+0x10>)
 8001842:	f000 ffc3 	bl	80027cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000d4 	.word	0x200000d4

08001850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff fff8 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001862:	490c      	ldr	r1, [pc, #48]	; (8001894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a09      	ldr	r2, [pc, #36]	; (800189c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001878:	4c09      	ldr	r4, [pc, #36]	; (80018a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f001 faed 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188a:	f7ff fd27 	bl	80012dc <main>
  bx lr
 800188e:	4770      	bx	lr
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001898:	08002f00 	.word	0x08002f00
  ldr r2, =_sbss
 800189c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80018a0:	20000120 	.word	0x20000120

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x28>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x28>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f923 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	200f      	movs	r0, #15
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff ff3c 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f93b 	bl	8001b6e <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f903 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000048 	.word	0x20000048
 800192c:	20000050 	.word	0x20000050
 8001930:	2000004c 	.word	0x2000004c

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x1c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x20>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a03      	ldr	r2, [pc, #12]	; (8001954 <HAL_IncTick+0x20>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	20000050 	.word	0x20000050
 8001954:	2000011c 	.word	0x2000011c

08001958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_GetTick+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	2000011c 	.word	0x2000011c

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4906      	ldr	r1, [pc, #24]	; (8001a04 <__NVIC_EnableIRQ+0x34>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff90 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff2d 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff42 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff90 	bl	8001a5c <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5f 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff35 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b08b      	sub	sp, #44	; 0x2c
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	e148      	b.n	8001e2e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f040 8137 	bne.w	8001e28 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4aa3      	ldr	r2, [pc, #652]	; (8001e4c <HAL_GPIO_Init+0x2c4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d05e      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bc4:	4aa1      	ldr	r2, [pc, #644]	; (8001e4c <HAL_GPIO_Init+0x2c4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d875      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bca:	4aa1      	ldr	r2, [pc, #644]	; (8001e50 <HAL_GPIO_Init+0x2c8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d058      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bd0:	4a9f      	ldr	r2, [pc, #636]	; (8001e50 <HAL_GPIO_Init+0x2c8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d86f      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bd6:	4a9f      	ldr	r2, [pc, #636]	; (8001e54 <HAL_GPIO_Init+0x2cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d052      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bdc:	4a9d      	ldr	r2, [pc, #628]	; (8001e54 <HAL_GPIO_Init+0x2cc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d869      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001be2:	4a9d      	ldr	r2, [pc, #628]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04c      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001be8:	4a9b      	ldr	r2, [pc, #620]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d863      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bee:	4a9b      	ldr	r2, [pc, #620]	; (8001e5c <HAL_GPIO_Init+0x2d4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d046      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a99      	ldr	r2, [pc, #612]	; (8001e5c <HAL_GPIO_Init+0x2d4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d85d      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d82a      	bhi.n	8001c54 <HAL_GPIO_Init+0xcc>
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d859      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <HAL_GPIO_Init+0x80>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c83 	.word	0x08001c83
 8001c0c:	08001c5d 	.word	0x08001c5d
 8001c10:	08001c6f 	.word	0x08001c6f
 8001c14:	08001cb1 	.word	0x08001cb1
 8001c18:	08001cb7 	.word	0x08001cb7
 8001c1c:	08001cb7 	.word	0x08001cb7
 8001c20:	08001cb7 	.word	0x08001cb7
 8001c24:	08001cb7 	.word	0x08001cb7
 8001c28:	08001cb7 	.word	0x08001cb7
 8001c2c:	08001cb7 	.word	0x08001cb7
 8001c30:	08001cb7 	.word	0x08001cb7
 8001c34:	08001cb7 	.word	0x08001cb7
 8001c38:	08001cb7 	.word	0x08001cb7
 8001c3c:	08001cb7 	.word	0x08001cb7
 8001c40:	08001cb7 	.word	0x08001cb7
 8001c44:	08001cb7 	.word	0x08001cb7
 8001c48:	08001cb7 	.word	0x08001cb7
 8001c4c:	08001c65 	.word	0x08001c65
 8001c50:	08001c79 	.word	0x08001c79
 8001c54:	4a82      	ldr	r2, [pc, #520]	; (8001e60 <HAL_GPIO_Init+0x2d8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c5a:	e02c      	b.n	8001cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e029      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e024      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	3308      	adds	r3, #8
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e01f      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	e01a      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e013      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	611a      	str	r2, [r3, #16]
          break;
 8001ca2:	e009      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	615a      	str	r2, [r3, #20]
          break;
 8001cae:	e003      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
          break;
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          break;
 8001cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	d801      	bhi.n	8001cc2 <HAL_GPIO_Init+0x13a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	e001      	b.n	8001cc6 <HAL_GPIO_Init+0x13e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	d802      	bhi.n	8001cd4 <HAL_GPIO_Init+0x14c>
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x152>
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	3b08      	subs	r3, #8
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	210f      	movs	r1, #15
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8090 	beq.w	8001e28 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d08:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <HAL_GPIO_Init+0x2dc>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a55      	ldr	r2, [pc, #340]	; (8001e64 <HAL_GPIO_Init+0x2dc>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_GPIO_Init+0x2dc>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d20:	4a51      	ldr	r2, [pc, #324]	; (8001e68 <HAL_GPIO_Init+0x2e0>)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a49      	ldr	r2, [pc, #292]	; (8001e6c <HAL_GPIO_Init+0x2e4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00d      	beq.n	8001d68 <HAL_GPIO_Init+0x1e0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a48      	ldr	r2, [pc, #288]	; (8001e70 <HAL_GPIO_Init+0x2e8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <HAL_GPIO_Init+0x1dc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a47      	ldr	r2, [pc, #284]	; (8001e74 <HAL_GPIO_Init+0x2ec>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_GPIO_Init+0x1d8>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_Init+0x1e2>
 8001d60:	2303      	movs	r3, #3
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x1e2>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_Init+0x1e2>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d7a:	493b      	ldr	r1, [pc, #236]	; (8001e68 <HAL_GPIO_Init+0x2e0>)
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4937      	ldr	r1, [pc, #220]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4933      	ldr	r1, [pc, #204]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	492d      	ldr	r1, [pc, #180]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4929      	ldr	r1, [pc, #164]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4923      	ldr	r1, [pc, #140]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	491f      	ldr	r1, [pc, #124]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4919      	ldr	r1, [pc, #100]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4915      	ldr	r1, [pc, #84]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f47f aeaf 	bne.w	8001b9c <HAL_GPIO_Init+0x14>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	372c      	adds	r7, #44	; 0x2c
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	10320000 	.word	0x10320000
 8001e50:	10310000 	.word	0x10310000
 8001e54:	10220000 	.word	0x10220000
 8001e58:	10210000 	.word	0x10210000
 8001e5c:	10120000 	.word	0x10120000
 8001e60:	10110000 	.word	0x10110000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	40010c00 	.word	0x40010c00
 8001e74:	40011000 	.word	0x40011000
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eba:	787b      	ldrb	r3, [r7, #1]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e26c      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x12c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e246      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x76>
 8001f44:	4b80      	ldr	r3, [pc, #512]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a7f      	ldr	r2, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x98>
 8001f5a:	4b7b      	ldr	r3, [pc, #492]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b78      	ldr	r3, [pc, #480]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a77      	ldr	r2, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xbc>
 8001f7e:	4b72      	ldr	r3, [pc, #456]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a71      	ldr	r2, [pc, #452]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a67      	ldr	r2, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fcce 	bl	8001958 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fcca 	bl	8001958 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1fa      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe4>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fcba 	bl	8001958 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fcb6 	bl	8001958 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1e6      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x10c>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1ba      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4939      	ldr	r1, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fc6f 	bl	8001958 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fc6b 	bl	8001958 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e19b      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4927      	ldr	r1, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x270>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fc4e 	bl	8001958 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fc4a 	bl	8001958 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e17a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03a      	beq.n	8002160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fc2e 	bl	8001958 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fc2a 	bl	8001958 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e15a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f000 fa9a 	bl	8002658 <RCC_Delay>
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7ff fc14 	bl	8001958 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	e00f      	b.n	8002154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff fc10 	bl	8001958 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d908      	bls.n	8002154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e140      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	42420000 	.word	0x42420000
 8002150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b9e      	ldr	r3, [pc, #632]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e9      	bne.n	8002134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a6 	beq.w	80022ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b97      	ldr	r3, [pc, #604]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a93      	ldr	r2, [pc, #588]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b91      	ldr	r3, [pc, #580]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b8b      	ldr	r3, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a8a      	ldr	r2, [pc, #552]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7ff fbd1 	bl	8001958 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7ff fbcd 	bl	8001958 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0fd      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x312>
 80021e0:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a7a      	ldr	r2, [pc, #488]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e02d      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x334>
 80021f6:	4b76      	ldr	r3, [pc, #472]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a75      	ldr	r2, [pc, #468]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a72      	ldr	r2, [pc, #456]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	e01c      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x356>
 8002218:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a6c      	ldr	r2, [pc, #432]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a66      	ldr	r2, [pc, #408]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d015      	beq.n	800227e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7ff fb81 	bl	8001958 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fb7d 	bl	8001958 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0ab      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCC_OscConfig+0x37e>
 800227c:	e014      	b.n	80022a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff fb6b 	bl	8001958 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff fb67 	bl	8001958 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e095      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ee      	bne.n	8002286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d105      	bne.n	80022ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8081 	beq.w	80023c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b42      	ldr	r3, [pc, #264]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d061      	beq.n	8002394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d146      	bne.n	8002366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff fb3b 	bl	8001958 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff fb37 	bl	8001958 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e067      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	492d      	ldr	r1, [pc, #180]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a19      	ldr	r1, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	430b      	orrs	r3, r1
 8002332:	4927      	ldr	r1, [pc, #156]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fb0b 	bl	8001958 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff fb07 	bl	8001958 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e037      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x46a>
 8002364:	e02f      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff faf4 	bl	8001958 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7ff faf0 	bl	8001958 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e020      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x498>
 8002392:	e018      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420060 	.word	0x42420060

080023dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7ff fa44 	bl	8001958 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7ff fa40 	bl	8001958 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f9a2 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08002ed4 	.word	0x08002ed4
 80025a8:	20000048 	.word	0x20000048
 80025ac:	2000004c 	.word	0x2000004c

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d002      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x30>
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x36>
 80025de:	e027      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e2:	613b      	str	r3, [r7, #16]
      break;
 80025e4:	e027      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0c9b      	lsrs	r3, r3, #18
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0c5b      	lsrs	r3, r3, #17
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	fb02 f203 	mul.w	r2, r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e004      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	613b      	str	r3, [r7, #16]
      break;
 800262e:	e002      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002632:	613b      	str	r3, [r7, #16]
      break;
 8002634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002636:	693b      	ldr	r3, [r7, #16]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	08002ee4 	.word	0x08002ee4
 8002650:	08002ef4 	.word	0x08002ef4
 8002654:	003d0900 	.word	0x003d0900

08002658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <RCC_Delay+0x34>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <RCC_Delay+0x38>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a5b      	lsrs	r3, r3, #9
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002674:	bf00      	nop
  }
  while (Delay --);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	60fa      	str	r2, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <RCC_Delay+0x1c>
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	20000048 	.word	0x20000048
 8002690:	10624dd3 	.word	0x10624dd3

08002694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e041      	b.n	800272a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff f872 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f000 fa6e 	bl	8002bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d001      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e035      	b.n	80027b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <HAL_TIM_Base_Start_IT+0x90>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_TIM_Base_Start_IT+0x4e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002776:	d004      	beq.n	8002782 <HAL_TIM_Base_Start_IT+0x4e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_TIM_Base_Start_IT+0x94>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d111      	bne.n	80027a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b06      	cmp	r3, #6
 8002792:	d010      	beq.n	80027b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a4:	e007      	b.n	80027b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40000400 	.word	0x40000400

080027cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d122      	bne.n	8002828 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d11b      	bne.n	8002828 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0202 	mvn.w	r2, #2
 80027f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f9b4 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 8002814:	e005      	b.n	8002822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f9a7 	bl	8002b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f9b6 	bl	8002b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b04      	cmp	r3, #4
 8002834:	d122      	bne.n	800287c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b04      	cmp	r3, #4
 8002842:	d11b      	bne.n	800287c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0204 	mvn.w	r2, #4
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f98a 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f97d 	bl	8002b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f98c 	bl	8002b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b08      	cmp	r3, #8
 8002888:	d122      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b08      	cmp	r3, #8
 8002896:	d11b      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0208 	mvn.w	r2, #8
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2204      	movs	r2, #4
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f960 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f953 	bl	8002b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f962 	bl	8002b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d122      	bne.n	8002924 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d11b      	bne.n	8002924 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0210 	mvn.w	r2, #16
 80028f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2208      	movs	r2, #8
 80028fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f936 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 8002910:	e005      	b.n	800291e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f929 	bl	8002b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f938 	bl	8002b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d10e      	bne.n	8002950 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0201 	mvn.w	r2, #1
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fdd8 	bl	8001500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b80      	cmp	r3, #128	; 0x80
 800295c:	d10e      	bne.n	800297c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	d107      	bne.n	800297c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa6b 	bl	8002e52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d107      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8fc 	bl	8002ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d10e      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d107      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0220 	mvn.w	r2, #32
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa36 	bl	8002e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_ConfigClockSource+0x1c>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0b4      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x186>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a30:	d03e      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a36:	f200 8087 	bhi.w	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	f000 8086 	beq.w	8002b4e <HAL_TIM_ConfigClockSource+0x172>
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	d87f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d01a      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0xa6>
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d87b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b60      	cmp	r3, #96	; 0x60
 8002a52:	d050      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x11a>
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d877      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b50      	cmp	r3, #80	; 0x50
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d873      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d058      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x13a>
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d86f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d064      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a6c:	2b30      	cmp	r3, #48	; 0x30
 8002a6e:	d86b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d060      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d867      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d05a      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a80:	e062      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f000 f95e 	bl	8002d52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	609a      	str	r2, [r3, #8]
      break;
 8002aae:	e04f      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f000 f947 	bl	8002d52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad2:	609a      	str	r2, [r3, #8]
      break;
 8002ad4:	e03c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 f8be 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2150      	movs	r1, #80	; 0x50
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f915 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002af4:	e02c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 f8dc 	bl	8002cc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2160      	movs	r1, #96	; 0x60
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f905 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b14:	e01c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 f89e 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f8f5 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b34:	e00c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 f8ec 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b46:	e003      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e000      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <TIM_Base_SetConfig+0xa8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <TIM_Base_SetConfig+0x28>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d003      	beq.n	8002bdc <TIM_Base_SetConfig+0x28>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a22      	ldr	r2, [pc, #136]	; (8002c60 <TIM_Base_SetConfig+0xac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d108      	bne.n	8002bee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <TIM_Base_SetConfig+0xa8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0x52>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0x52>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <TIM_Base_SetConfig+0xac>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <TIM_Base_SetConfig+0xa8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d103      	bne.n	8002c4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	615a      	str	r2, [r3, #20]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40000400 	.word	0x40000400

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 030a 	bic.w	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0210 	bic.w	r2, r3, #16
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	031b      	lsls	r3, r3, #12
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f043 0307 	orr.w	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b087      	sub	sp, #28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e041      	b.n	8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d004      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10c      	bne.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400

08002e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	2600      	movs	r6, #0
 8002e68:	4d0c      	ldr	r5, [pc, #48]	; (8002e9c <__libc_init_array+0x38>)
 8002e6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	f000 f822 	bl	8002ebc <_init>
 8002e78:	2600      	movs	r6, #0
 8002e7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ea4 <__libc_init_array+0x40>)
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ea8 <__libc_init_array+0x44>)
 8002e7e:	1b64      	subs	r4, r4, r5
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002ef8 	.word	0x08002ef8
 8002ea0:	08002ef8 	.word	0x08002ef8
 8002ea4:	08002ef8 	.word	0x08002ef8
 8002ea8:	08002efc 	.word	0x08002efc

08002eac <memset>:
 8002eac:	4603      	mov	r3, r0
 8002eae:	4402      	add	r2, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <_init>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr

08002ec8 <_fini>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr
